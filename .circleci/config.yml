version: 2.1
orbs:
  android: circleci/android@1.0.3
  flutter: circleci/flutter@1.1.0
  node: circleci/node@1.1.6
executors:
  app-executor:
    docker:
      - image: circleci/flutter@1.1.0
    working_directory: ~/repo
  docker_publisher:
    environment:
      IMAGE_NAME: shantanur66/card-accumulator
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build-and-test-flutter:
    docker:
      - image: cirrusci/flutter
    steps:
      - checkout:
          name: Checkout to the current branch to perform further tasks
      - run: 
          name: What is the current branch
          command: echo ${CIRCLE_BRANCH}
      - run: flutter doctor
      - run: 
          name: get latest dependecies for flutter
          command: cd flutter_client && flutter pub get
          
      - run:
          name: automated check for your flutter code(linting)
          command: cd flutter_client && flutter analyze
  
  build-and-test-node:
    executor:
      name: node/default
    steps:
      - checkout
      - run:
          name:  Which current branch is being used
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys: 
            - app-{{ checksum "package.json"}}
            - app-
      - run: 
          name: install dependencies
          command: npm install
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json"}}
  unit-test-graphAPI:
    executor:
      name: node/default
    steps:
      - checkout
      # When you trigger a build from a repository, 
      # Build triggers use a shallow clone of your repository.
      # This means that the single commit that triggered the automatic build is checked out in the workspace volume. 
      # Your repository directories are attached to the workspace volume.
      # That is why you should include the whole path on the package.json.
      - run:
          name:  Which current branch is being used
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys: 
            - app-{{ checksum "package.json"}}
            - app-
      - run:
          command: npm install --save-dev jest supertest 
      - run:
          name: install jest
          command: npm install --save-dev jest
      - run:
          name:  unit-Testing for graphql API
          command: npm run test
      - save_cache:
          paths:
            - node_modules
          key: app-{{ checksum "package.json"}}
  publish-to-docker-hub:
    executor:
      name: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys: 
            - app-{{ checksum "package.json"}}
            - app-
      - run:
          name: login to Docker-hub
          command: docker login --username "${DOCKER_HUB_USER_NAME}" --password "${DOCKER_HUB_PASS}"
      - run:
          name: build docker image
          command: docker build -t ${IMAGE_NAME}:latest .
      - run:
          name: Tag and push image to docker hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master"]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:production-${CIRCLE_BUILD_NUM} && docker push latest ${IMAGE_NAME}:production-${CIRCLE_BUILD_NUM}
            elif ["${CIRCLE_BRANCH}" == "staging"]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM} && docker push latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM}
            else
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM} && docker push latest ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM}
            fi
  deploy-to-heroku:
    docker:
      - image: circleci/node:13.12.0
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: What is the current branch
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: deploy server to heroku
          command: |
            if [ "${CIRCLE_BRANCH}" == "master"]
            then
              git push https://heroku:$HEROKU_API_KEY@${HEROKU_APP_PRODUCTION}.git ${CIRCLE_BRANCH}:master -f
            elif ["${CIRCLE_BRANCH}" == "staging"]
            then
              git push https://heroku:$HEROKU_API_KEY@${HEROKU_APP_STAGING}.git ${CIRCLE_BRANCH}:master -f
            else
              git push https://heroku:$HEROKU_API_KEY@${HEROKU_APP_DEV}.git ${CIRCLE_BRANCH}:master -f
            fi

workflows:
  build:
    jobs:
      - build-and-test-flutter
      - build-and-test-node
      - unit-test-graphAPI:
          requires:
            - build-and-test-node
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-heroku:
          requires:
            - build-and-test-flutter
            - build-and-test-node
            - unit-test-graphAPI
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - publish-to-docker-hub:
          requires:
            - build-and-test-flutter
            - build-and-test-node
            - unit-test-graphAPI
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      
